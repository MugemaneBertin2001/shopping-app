/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.example;

import java.time.LocalTime;

import utils.classes.AuthManager;
import utils.classes.CreditCardPayment;
import utils.classes.Electronicsfactory;
import utils.classes.InventoryManager;
import utils.classes.Laptop;
import utils.classes.Order;
import utils.classes.PayPalPayment;
import utils.classes.Phone;
import utils.classes.Product;
import utils.classes.ShippingDepartment;
import utils.classes.ShoppingCart;

public class App {
    public String getGreeting() {
        System.out.println("Determining the appropriate greeting...");
        try {
            Thread.sleep(2000); // Pause for effect
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    
        int currentHour = LocalTime.now().getHour();
        String greeting;
    
        if (currentHour < 12) {
            greeting = "Good morning!";
        } else if (currentHour < 18) {
            greeting = "Good afternoon!";
        } else {
            greeting = "Good evening!";
        }
        return greeting;
    
    }
    

    public static void main(String[] args) {
   
        System.out.println("Greeting determined: " +  new App().getGreeting());

        demonstrateSingletonBehavior();

        demonstrateShoppingCart();
         
        demonstrateOrderObservers();

        demonstrateProductFactory();
      
        demonstrateLaptop();
        
        demonstratePhone();
    }
    
 
    private static void demonstrateSingletonBehavior() {
        System.out.println("\n-----------------------------------\n");
        System.out.println("Initiating Singleton Behavior Analysis...");
        pauseForEffect(2000);
        System.out.println("\n");
        System.out.println("Initiating AuthManager Sequence...");
        AuthManager manager1 = AuthManager.getInstance();
        AuthManager manager2 = AuthManager.getInstance();
        pauseForEffect(2000);
        System.out.println("\n");
        System.out.println("Verifying Singleton Integrity...");
        System.out.println("Checking if both AuthManager instances are the same: " + (manager1 == manager2));
        System.out.println("\n-----------------------------------\n");
        System.out.println("Singleton Analysis Complete.");
    }
    
   
    
    
 
    private static void demonstrateShoppingCart() {
        ShoppingCart cart = new ShoppingCart();
        System.out.println("Initializing Shopping Cart...");
    
        pauseForEffect(2000);

        demonstrateCreditCardPayment(cart);
    
        System.out.println("Initiating PayPal Payment...");
        pauseForEffect(2000);
        demonstratePayPalPayment(cart);
    
        System.out.println("Shopping Cart Demonstration Complete.");
    }
    private static void demonstrateCreditCardPayment(ShoppingCart cart) {
        System.out.println("Initiating Credit Card Payment...");

        pauseForEffect(2000);
    
        CreditCardPayment creditCardPayment = new CreditCardPayment("1234 5678 9012 3456", "John Doe", "123");
        cart.setPaymentStrategy(creditCardPayment);
        cart.checkout(1500.0);
        System.out.println("Credit card payment message: " + creditCardPayment.getMsg());
        System.out.println("\n-----------------------------------\n");
    }
    
    private static void demonstratePayPalPayment(ShoppingCart cart) {
        pauseForEffect(2000);

        PayPalPayment payPalPayment = new PayPalPayment("user@example.com", "password");
        cart.setPaymentStrategy(payPalPayment);
        cart.checkout(1500.0);
        System.out.println("PayPal payment message: " + payPalPayment.getMsg());
        System.out.println("\n-----------------------------------\n");
    }
    
    private static void demonstrateOrderObservers() {
        System.out.println("Initiating Order Observers...");

        pauseForEffect(2000);
    
        Order order = new Order("ORD123", 1500.0);
        InventoryManager inventoryManager = new InventoryManager();
        ShippingDepartment shippingDepartment = new ShippingDepartment();
        order.addObserver(inventoryManager);
        order.addObserver(shippingDepartment);
        order.notifyObservers();
        System.out.println("Inventory Manager Message: " + inventoryManager.getLastMessage());
        System.out.println("Shipping Department Message: " + shippingDepartment.getLastMessage());
        System.out.println("\n-----------------------------------\n");
    }
    
    private static void demonstratePhone() {
        System.out.println("Initiating Phone Demonstration...");
       
        pauseForEffect(2000);
    
        Phone phone = new Phone("iPhone 12", 999.0);
        System.out.println("Phone Details:");
        System.out.println(phone.getDescription());
        System.out.println("\n-----------------------------------\n");
    }
    
    private static void demonstrateLaptop() {
        System.out.println("Initiating Laptop Demonstration...");
        pauseForEffect(2000);
    
        Laptop laptop = new Laptop("Dell XPS", 1500.0);
        System.out.println("Laptop Details:");
        System.out.println(laptop.getDescription());
        System.out.println("\n-----------------------------------\n");
    }

    private static void demonstrateProductFactory() {
        System.out.println("Initiating Product Factory Sequence...");
        pauseForEffect(2000); // Pause for effect
    
        System.out.println("Initiating Laptop Creation...");
        Electronicsfactory factory = new Electronicsfactory();
        
        // Create a Laptop product
        Product laptop = factory.createProduct("Laptop");
        if (laptop != null) {
            pauseForEffect(2000); // Pause for effect
            System.out.println("\nCreated Laptop:");
            System.out.println(laptop.getDescription());
        } else {
            System.out.println("\nFailed to create Laptop product.");
        }
        
        pauseForEffect(2000); // Pause for effect
        
        System.out.println("\nInitiating Phone Creation...");
        
        // Create a Phone product
        Product phone = factory.createProduct("Phone");
        if (phone != null) {
            pauseForEffect(2000); // Pause for effect
            System.out.println("\nCreated Phone:");
            System.out.println(phone.getDescription());
        } else {
            System.out.println("\nFailed to create Phone product.");
        }
        
        System.out.println("Product Factory Sequence Complete.");
    }
     // Method to pause execution for a specified duration (in milliseconds)
     private static void pauseForEffect(int milliseconds) {
        try {
            Thread.sleep(milliseconds);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    
}
